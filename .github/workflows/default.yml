name: default

on: [push, pull_request]

jobs:
  run_tests:
    name: unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            rev: nightly/nvim-linux64.tar.gz
          - os: ubuntu-22.04
            rev: v0.7.2/nvim-linux64.tar.gz
          - os: ubuntu-22.04
            rev: v0.8.3/nvim-linux64.tar.gz
          - os: ubuntu-22.04
            rev: v0.9.5/nvim-linux64.tar.gz
          - os: ubuntu-22.04
            rev: v0.10.0/nvim-linux64.tar.gz
    steps:
      - uses: actions/checkout@v4
      - run: date +%F > todays-date
      - name: Restore cache for today's nightly.
        uses: actions/cache@v4
        with:
          path: _neovim
          key: ${{ runner.os }}-${{ matrix.rev }}-${{ hashFiles('todays-date') }}
      - name: Prepare
        run: |
          test -d _neovim || {
            mkdir -p _neovim
            curl -sL "https://github.com/neovim/neovim/releases/download/${{ matrix.rev }}" | tar xzf - --strip-components=1 -C "${PWD}/_neovim"
          }

      - name: Run tests
        run: |
          export PATH="${PWD}/_neovim/bin:${PATH}"
          export VIM="${PWD}/_neovim/share/nvim/runtime"
          nvim --version
          make test

  run_tests_windows:
    name: unit tests (Windows)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]
        rev: [nightly, v0.7.2, v0.8.3, v0.9.5, v0.10.0]
    steps:
      - uses: actions/checkout@v4
      - uses: rhysd/action-setup-vim@v1
        with:
          neovim: true
          version: ${{ matrix.rev }}
      - name: Run tests
        run: |
          nvim --version
          nvim --headless --noplugin -u scripts/minimal.vim -c "PlenaryBustedFile tests/plenary/path2_spec.lua"

  stylua:
    name: stylua
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: JohnnyMorganz/stylua-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: latest
          # CLI arguments
          args: --color always --check .

  luacheck:
    name: Luacheck
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Prepare
        run: |
          sudo apt-get update
          sudo apt-get install -y luarocks
          sudo luarocks install luacheck

      - name: Lint
        run: sudo make lint
